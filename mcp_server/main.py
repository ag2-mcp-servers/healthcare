# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:22:22+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

from models import (
    ArticlesList,
    BlogList,
    BlogPage,
    GlossaryList,
    GlossaryPage,
    MediaTypeExtension,
    Page,
    QuestionPage,
    QuestionsList,
    StatePage,
    StatesList,
    TopicsList,
)

app = MCPProxy(
    title='Healthcare',
    version='1.0.0',
    servers=[{'url': 'https://www.healthcare.gov'}],
)


@app.get(
    '/api/articles{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_api_articles_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/blog{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_api_blog_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/glossary{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_api_glossary_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/questions{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_api_questions_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/states{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_api_states_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/topics{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_api_topics_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/blog/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get_blog__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/es/blog/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_es_blog__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/es/glossary/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get_es_glossary__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/es/question/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get_es_question__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/es/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get_es__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/es/{stateName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get_es__state_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    state_name: str = Path(..., alias='stateName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/glossary/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get_glossary__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/question/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get_question__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{pageName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=[
        'media_type_extension_retrieval',
        'page_media_type_extensions',
        'localized_media_extension_fetching',
    ],
)
def get__page_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    page_name: str = Path(..., alias='pageName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{stateName}{mediaTypeExtension}',
    description=""" Returns pages content. """,
    tags=['media_type_extension_retrieval', 'page_media_type_extensions'],
)
def get__state_name_media_type_extension(
    media_type_extension: MediaTypeExtension = Path(..., alias='mediaTypeExtension'),
    state_name: str = Path(..., alias='stateName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
